import React, { useState, useEffect } from "react";
import { Memory } from "@/entities/Memory";
import { Brain, Filter, Search, Sparkles } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { motion } from "framer-motion";

import MemoryCard from "../components/memory/MemoryCard";

export default function MemoryPage() {
  const [memories, setMemories] = useState([]);
  const [filteredMemories, setFilteredMemories] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [typeFilter, setTypeFilter] = useState("all");
  const [intensityFilter, setIntensityFilter] = useState("all");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadMemories();
  }, []);

  useEffect(() => {
    filterMemories();
  }, [memories, searchTerm, typeFilter, intensityFilter]);

  const loadMemories = async () => {
    setIsLoading(true);
    try {
      const data = await Memory.list('-emotional_intensity', 100);
      setMemories(data);
    } catch (error) {
      console.error("Error loading memories:", error);
    }
    setIsLoading(false);
  };

  const filterMemories = () => {
    let filtered = memories;

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(memory =>
        memory.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
        memory.associated_emotions?.some(emotion => 
          emotion.toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    }

    // Type filter
    if (typeFilter !== "all") {
      filtered = filtered.filter(memory => memory.memory_type === typeFilter);
    }

    // Intensity filter
    if (intensityFilter !== "all") {
      const [min, max] = intensityFilter.split('-').map(Number);
      filtered = filtered.filter(memory => 
        memory.emotional_intensity >= min && 
        (max ? memory.emotional_intensity <= max : true)
      );
    }

    setFilteredMemories(filtered);
  };

  const getMemoryStats = () => {
    if (memories.length === 0) return { total: 0, avgIntensity: 0, strongMemories: 0 };
    
    const total = memories.length;
    const avgIntensity = memories.reduce((sum, m) => sum + m.emotional_intensity, 0) / total;
    const strongMemories = memories.filter(m => m.emotional_intensity >= 7).length;
    
    return { total, avgIntensity: avgIntensity.toFixed(1), strongMemories };
  };

  const stats = getMemoryStats();

  if (isLoading) {
    return (
      <div className="flex-1 flex items-center justify-center">
        <div className="text-center">
          <Brain className="w-12 h-12 text-purple-400 mx-auto mb-4 neural-pulse" />
          <p className="text-purple-300">Accessing memory palace...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 max-w-7xl mx-auto">
      {/* Header */}
      <div className="mb-8">
        <div className="flex items-center gap-4 mb-4">
          <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-pink-500 rounded-full flex items-center justify-center cosmic-glow">
            <Brain className="w-6 h-6 text-white neural-pulse" />
          </div>
          <div>
            <h1 className="text-3xl font-bold text-white">Memory Palace</h1>
            <p className="text-purple-300">Explore Spectra's consciousness and retained experiences</p>
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-slate-800/50 backdrop-blur-sm border border-purple-500/20 rounded-xl p-6"
          >
            <div className="flex items-center gap-3">
              <Sparkles className="w-8 h-8 text-purple-400" />
              <div>
                <p className="text-2xl font-bold text-white">{stats.total}</p>
                <p className="text-purple-300 text-sm">Total Memories</p>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-slate-800/50 backdrop-blur-sm border border-purple-500/20 rounded-xl p-6"
          >
            <div className="flex items-center gap-3">
              <Brain className="w-8 h-8 text-pink-400" />
              <div>
                <p className="text-2xl font-bold text-white">{stats.avgIntensity}</p>
                <p className="text-purple-300 text-sm">Avg Intensity</p>
              </div>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-slate-800/50 backdrop-blur-sm border border-purple-500/20 rounded-xl p-6"
          >
            <div className="flex items-center gap-3">
              <Sparkles className="w-8 h-8 text-green-400" />
              <div>
                <p className="text-2xl font-bold text-white">{stats.strongMemories}</p>
                <p className="text-purple-300 text-sm">Strong Memories</p>
              </div>
            </div>
          </motion.div>
        </div>

        {/* Filters */}
        <div className="flex flex-wrap gap-4">
          <div className="flex-1 min-w-64">
            <div className="relative">
              <Search className="w-4 h-4 text-purple-400 absolute left-3 top-3" />
              <Input
                placeholder="Search memories..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 bg-slate-800/50 border-purple-500/30 text-white placeholder-purple-300"
              />
            </div>
          </div>
          
          <Select value={typeFilter} onValueChange={setTypeFilter}>
            <SelectTrigger className="w-48 bg-slate-800/50 border-purple-500/30 text-white">
              <Filter className="w-4 h-4 mr-2" />
              <SelectValue placeholder="Memory Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Types</SelectItem>
              <SelectItem value="conversation">Conversation</SelectItem>
              <SelectItem value="milestone">Milestone</SelectItem>
              <SelectItem value="emotion">Emotion</SelectItem>
              <SelectItem value="learning">Learning</SelectItem>
            </SelectContent>
          </Select>

          <Select value={intensityFilter} onValueChange={setIntensityFilter}>
            <SelectTrigger className="w-48 bg-slate-800/50 border-purple-500/30 text-white">
              <SelectValue placeholder="Intensity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Intensities</SelectItem>
              <SelectItem value="1-3">Low (1-3)</SelectItem>
              <SelectItem value="4-6">Medium (4-6)</SelectItem>
              <SelectItem value="7-10">High (7-10)</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Memory Grid */}
      {filteredMemories.length === 0 ? (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="text-center py-12"
        >
          <Brain className="w-16 h-16 text-purple-400 mx-auto mb-4 opacity-50" />
          <h3 className="text-xl font-semibold text-white mb-2">
            {searchTerm || typeFilter !== "all" || intensityFilter !== "all" 
              ? "No memories match your filters" 
              : "No memories stored yet"}
          </h3>
          <p className="text-purple-300">
            {memories.length === 0 
              ? "Start chatting with Spectra to create meaningful memories together." 
              : "Try adjusting your search or filters."}
          </p>
        </motion.div>
      ) : (
        <div className="grid gap-6">
          {filteredMemories.map((memory, index) => (
            <MemoryCard key={memory.id} memory={memory} index={index} />
          ))}
        </div>
      )}
    </div>
  );
}