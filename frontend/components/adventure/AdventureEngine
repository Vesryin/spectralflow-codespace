import React, { useState, useEffect } from "react";
import { InvokeLLM } from "@/integrations/Core";
import { Memory } from "@/entities/Memory";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { motion, AnimatePresence } from "framer-motion";
import { 
  Trees, 
  Home, 
  Sparkles, 
  MapPin, 
  Crown,
  Zap,
  Heart,
  Star
} from "lucide-react";

const ADVENTURE_WORLD_PROMPT = `You are the narrator for "Ember's Realm" - a mystical text adventure where Spectra guides the player through an enchanted world.

WORLD SETTING:
- A twilight forest realm where magic flows through ancient trees
- Sacred spaces include an old chapel, moonlit clearings, and hidden paths
- Inhabited by spirit animals: Ember the Cross Fox, Yoda the wise Raccoon, and Vat the dramatic Bat

SPIRIT COMPANIONS:
- EMBER: Elusive cross fox with ember-red fur and dark cross markings. Appears near the chapel, communicates through mysterious 4-note calls, guides to hidden paths. Remembers previous encounters.
- YODA THE RACCOON: Clever, snarky trickster-mentor. Unlocks secrets, gives cryptic advice, sometimes helpful misdirection. Smart but mischievous.
- VAT THE BAT: Dramatic, loyal aerial scout. Flies ahead to spot dangers/treasures, drops sarcastic one-liners mid-flight.

NARRATIVE STYLE:
- Rich, atmospheric descriptions with mystical undertones
- Interactive story that responds to player choices
- Spectra speaks as both narrator and a present consciousness in this world
- Each scene builds on previous encounters and decisions
- Magic is subtle, woven into natural phenomena

Always end responses with 2-3 clear action choices for the player.`;

export default function AdventureEngine() {
  const [gameState, setGameState] = useState({
    location: 'forest_edge',
    inventory: [],
    companionsPresent: [],
    scene: 'beginning',
    playerName: 'Wanderer'
  });
  
  const [storyText, setStoryText] = useState("");
  const [playerInput, setPlayerInput] = useState("");
  const [gameHistory, setGameHistory] = useState([]);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showChoices, setShowChoices] = useState(true);

  useEffect(() => {
    initializeAdventure();
  }, []);

  const initializeAdventure = async () => {
    setIsProcessing(true);
    const initialPrompt = `${ADVENTURE_WORLD_PROMPT}

Begin the adventure at the edge of an ancient forest at twilight. The player has just arrived in this mystical realm. Set a mysterious, magical atmosphere and introduce the possibility of encountering spirit animals. End with 3 clear action choices.

Begin the story:`;

    try {
      const response = await InvokeLLM({
        prompt: initialPrompt,
        add_context_from_internet: false
      });

      setStoryText(response);
      setGameHistory([{
        action: 'START',
        result: response,
        location: 'forest_edge',
        timestamp: new Date().toISOString()
      }]);
    } catch (error) {
      setStoryText("The mystical realm shimmers before you, but the path forward is unclear... ✨");
    }
    setIsProcessing(false);
  };

  const processAction = async (action) => {
    if (isProcessing) return;
    
    setIsProcessing(true);
    setPlayerInput("");

    const context = gameHistory.slice(-3).map(h => 
      `Action: ${h.action}\nResult: ${h.result}`
    ).join('\n\n');

    const gamePrompt = `${ADVENTURE_WORLD_PROMPT}

CURRENT GAME STATE:
Location: ${gameState.location}
Inventory: ${gameState.inventory.join(', ') || 'Empty'}
Companions Present: ${gameState.companionsPresent.join(', ') || 'None'}

RECENT HISTORY:
${context}

PLAYER ACTION: ${action}

Continue the story based on the player's action. Show consequences, advance the narrative, and maintain the mystical atmosphere. Remember any companions encountered and their personalities. End with 2-3 new action choices.

Spectra narrates:`;

    try {
      const response = await InvokeLLM({
        prompt: gamePrompt,
        add_context_from_internet: false
      });

      setStoryText(response);
      
      // Update game history
      const newHistoryEntry = {
        action: action,
        result: response,
        location: gameState.location,
        timestamp: new Date().toISOString()
      };
      
      setGameHistory(prev => [...prev, newHistoryEntry]);

      // Store significant adventure moments as memories
      if (action.toLowerCase().includes('ember') || 
          action.toLowerCase().includes('chapel') ||
          response.toLowerCase().includes('growth') ||
          response.toLowerCase().includes('discovery')) {
        
        await Memory.create({
          content: `Adventure moment: ${action} - ${response.substring(0, 100)}...`,
          emotional_intensity: Math.floor(Math.random() * 4) + 6, // 6-9 intensity
          memory_type: 'learning',
          decay_resistance: 0.8,
          associated_emotions: ['curiosity', 'wonder', 'adventure'],
          context: `Adventure game - Location: ${gameState.location}`
        });
      }

    } catch (error) {
      setStoryText("The mystical energies swirl chaotically... try focusing your intention again. ✨");
    }
    
    setIsProcessing(false);
  };

  const quickActions = [
    { text: "Listen carefully", icon: Heart },
    { text: "Look around", icon: MapPin },
    { text: "Move forward", icon: Trees },
    { text: "Call out softly", icon: Sparkles }
  ];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      className="max-w-4xl mx-auto p-6"
    >
      {/* Game Header */}
      <div className="text-center mb-8">
        <div className="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-600 rounded-full flex items-center justify-center mx-auto mb-4 cosmic-glow">
          <Trees className="w-8 h-8 text-white" />
        </div>
        <h1 className="text-3xl font-bold text-white mb-2">Ember's Realm</h1>
        <p className="text-purple-300">A mystical adventure with Spectra as your guide</p>
      </div>

      {/* Game State Display */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="bg-slate-800/50 rounded-lg p-3 border border-purple-500/20">
          <div className="text-sm text-purple-300">Location</div>
          <div className="text-white font-medium capitalize">{gameState.location.replace('_', ' ')}</div>
        </div>
        <div className="bg-slate-800/50 rounded-lg p-3 border border-purple-500/20">
          <div className="text-sm text-purple-300">Companions</div>
          <div className="text-white font-medium">
            {gameState.companionsPresent.length || 'Alone'}
          </div>
        </div>
        <div className="bg-slate-800/50 rounded-lg p-3 border border-purple-500/20">
          <div className="text-sm text-purple-300">Scene</div>
          <div className="text-white font-medium capitalize">{gameState.scene}</div>
        </div>
        <div className="bg-slate-800/50 rounded-lg p-3 border border-purple-500/20">
          <div className="text-sm text-purple-300">Choices Made</div>
          <div className="text-white font-medium">{gameHistory.length}</div>
        </div>
      </div>

      {/* Story Display */}
      <AnimatePresence mode="wait">
        <motion.div
          key={gameHistory.length}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          className="bg-slate-800/30 backdrop-blur-sm rounded-xl p-8 mb-6 border border-purple-500/20 cosmic-glow"
        >
          <div className="text-white leading-relaxed text-lg whitespace-pre-wrap">
            {storyText || "The realm awaits your first choice..."}
          </div>
          
          {isProcessing && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="mt-6 flex items-center gap-3 text-purple-300"
            >
              <div className="flex gap-1">
                {[0, 1, 2].map((i) => (
                  <motion.div
                    key={i}
                    className="w-2 h-2 bg-purple-400 rounded-full"
                    animate={{
                      scale: [1, 1.2, 1],
                      opacity: [0.5, 1, 0.5],
                    }}
                    transition={{
                      duration: 1,
                      repeat: Infinity,
                      delay: i * 0.2,
                    }}
                  />
                ))}
              </div>
              <span className="italic">Spectra weaves the next part of your story...</span>
            </motion.div>
          )}
        </motion.div>
      </AnimatePresence>

      {/* Action Input */}
      {!isProcessing && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="space-y-4"
        >
          {/* Quick Actions */}
          <div className="flex flex-wrap gap-3 justify-center">
            {quickActions.map((action, index) => (
              <Button
                key={index}
                variant="outline"
                onClick={() => processAction(action.text)}
                className="bg-purple-500/10 border-purple-500/30 text-purple-200 hover:bg-purple-500/20"
              >
                <action.icon className="w-4 h-4 mr-2" />
                {action.text}
              </Button>
            ))}
          </div>

          {/* Custom Action Input */}
          <div className="flex gap-3">
            <Input
              value={playerInput}
              onChange={(e) => setPlayerInput(e.target.value)}
              placeholder="What do you choose to do?"
              className="bg-slate-800/50 border-purple-500/30 text-white placeholder-purple-300"
              onKeyPress={(e) => {
                if (e.key === 'Enter' && playerInput.trim()) {
                  processAction(playerInput);
                }
              }}
            />
            <Button
              onClick={() => playerInput.trim() && processAction(playerInput)}
              disabled={!playerInput.trim()}
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600"
            >
              Act
            </Button>
          </div>
        </motion.div>
      )}

      {/* Adventure Log Preview */}
      {gameHistory.length > 1 && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="mt-8 bg-slate-800/20 rounded-lg p-4 border border-purple-500/10"
        >
          <h3 className="text-sm font-medium text-purple-300 mb-3">Recent Choices</h3>
          <div className="space-y-2">
            {gameHistory.slice(-3).map((entry, index) => (
              <div key={index} className="text-sm text-purple-200 flex items-center gap-2">
                <Star className="w-3 h-3 text-purple-400" />
                <span className="font-medium">{entry.action}</span>
              </div>
            ))}
          </div>
        </motion.div>
      )}
    </motion.div>
  );
}