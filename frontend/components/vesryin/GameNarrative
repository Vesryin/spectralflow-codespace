import React from "react";
import { motion, AnimatePresence } from "framer-motion";
import { Skull, Sword, Eye, Crown, Zap, Image as ImageIcon } from "lucide-react";
import { format } from "date-fns";
import useTypewriter from '../../hooks/useTypewriter';

const eventTypeIcons = {
  narrative: Eye,
  combat: Sword,
  death: Skull,
  choice: Crown,
  resurrection: Zap,
  dice_roll: Crown
};

export default function GameNarrative({ events, isProcessing, gameState, isGeneratingImage }) {
  const currentEvent = events[events.length - 1];
  const displayedText = useTypewriter(currentEvent?.description || "", 25);

  return (
    <div className="relative min-h-full w-full max-w-full overflow-hidden">
      {currentEvent?.image_url && (
        <div className="absolute inset-0 z-0">
          <img 
            src={currentEvent.image_url}
            alt="Scene background"
            className="w-full h-full object-cover opacity-30"
            style={{ filter: 'blur(1px)' }}
          />
          <div className="absolute inset-0 bg-gradient-to-b from-black/60 via-black/40 to-black/80" />
        </div>
      )}

      <div className="relative z-10 p-3 sm:p-4 lg:p-6 space-y-3 sm:space-y-4 lg:space-y-6 w-full max-w-full">
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className={`text-center py-2 sm:py-3 px-3 sm:px-4 lg:px-6 rounded-lg border backdrop-blur-sm w-full max-w-full ${
            gameState === 'combat' ? 'bg-red-900/60 border-red-700/30 text-red-300' :
            gameState === 'death' ? 'bg-gray-900/60 border-gray-700/30 text-gray-300' :
            'bg-blue-900/60 border-blue-700/30 text-blue-300'
          }`}
        >
          <span className="text-xs sm:text-sm font-medium uppercase tracking-wider">
            {gameState === 'combat' ? '‚öîÔ∏è Combat' : 
             gameState === 'death' ? 'üíÄ Death State' : 
             'üìñ Narrative'}
          </span>
        </motion.div>

        <div className="space-y-3 sm:space-y-4 lg:space-y-6 w-full max-w-full">
          <AnimatePresence>
            {events.slice(0, -1).map((event, index) => {
              const IconComponent = eventTypeIcons[event.event_type] || Eye;
              
              return (
                <motion.div
                  key={event.id || index}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  className={`relative bg-gray-900/70 backdrop-blur-sm rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-6 border-l-4 shadow-xl w-full max-w-full overflow-hidden ${
                    event.event_type === 'death' ? 'border-red-500' :
                    event.event_type === 'combat' ? 'border-yellow-500' :
                    event.event_type === 'dice_roll' ? 'border-blue-500' :
                    event.event_type === 'learning' ? 'border-green-500' :
                    'border-blue-500'
                  }`}
                >
                  <div className="flex items-start justify-between mb-2 sm:mb-3 lg:mb-4 flex-wrap gap-2">
                    <div className="flex items-center gap-2 sm:gap-3 min-w-0 flex-1">
                      <div className={`w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                        event.event_type === 'death' ? 'bg-red-500/20' :
                        event.event_type === 'combat' ? 'bg-yellow-500/20' :
                        event.event_type === 'dice_roll' ? 'bg-blue-500/20' :
                        event.event_type === 'learning' ? 'bg-green-500/20' :
                        'bg-blue-500/20'
                      }`}>
                        <IconComponent className={`w-3 h-3 sm:w-4 sm:h-4 ${
                          event.event_type === 'death' ? 'text-red-400' :
                          event.event_type === 'combat' ? 'text-yellow-400' :
                          event.event_type === 'dice_roll' ? 'text-blue-400' :
                          event.event_type === 'learning' ? 'text-green-400' :
                          'text-blue-400'
                        }`} />
                      </div>
                      <span className={`text-xs sm:text-sm font-medium uppercase tracking-wider truncate ${
                        event.event_type === 'death' ? 'text-red-300' :
                        event.event_type === 'combat' ? 'text-yellow-300' :
                        event.event_type === 'dice_roll' ? 'text-blue-300' :
                        event.event_type === 'learning' ? 'text-green-300' :
                        'text-blue-300'
                      }`}>
                        {event.event_type.replace('_', ' ')}
                      </span>
                    </div>
                    <div className="flex items-center gap-2 flex-shrink-0">
                      {event.image_url && (
                        <ImageIcon className="w-3 h-3 text-purple-400" />
                      )}
                      <span className="text-xs text-gray-400">
                        {format(new Date(event.created_date), 'HH:mm')}
                      </span>
                    </div>
                  </div>

                  <div className="text-white leading-relaxed whitespace-pre-wrap text-sm sm:text-base break-words overflow-hidden w-full">
                    {event.description}
                  </div>
                </motion.div>
              );
            })}
          </AnimatePresence>
          
          {currentEvent && (
            <motion.div
              key={currentEvent.id || 'current'}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className={`relative bg-gray-900/70 backdrop-blur-sm rounded-lg sm:rounded-xl p-3 sm:p-4 lg:p-6 border-l-4 shadow-xl w-full max-w-full overflow-hidden ${
                currentEvent.event_type === 'death' ? 'border-red-500' :
                currentEvent.event_type === 'combat' ? 'border-yellow-500' :
                currentEvent.event_type === 'dice_roll' ? 'border-blue-500' :
                currentEvent.event_type === 'learning' ? 'border-green-500' :
                'border-blue-500'
              }`}
            >
              <div className="flex items-start justify-between mb-2 sm:mb-3 lg:mb-4 flex-wrap gap-2">
                <div className="flex items-center gap-2 sm:gap-3 min-w-0 flex-1">
                  <div className={`w-5 h-5 sm:w-6 sm:h-6 lg:w-8 lg:h-8 rounded-full flex items-center justify-center flex-shrink-0 ${
                    currentEvent.event_type === 'death' ? 'bg-red-500/20' :
                    currentEvent.event_type === 'combat' ? 'bg-yellow-500/20' :
                    currentEvent.event_type === 'dice_roll' ? 'bg-blue-500/20' :
                    currentEvent.event_type === 'learning' ? 'bg-green-500/20' :
                    'bg-blue-500/20'
                  }`}>
                    <IconComponent className={`w-3 h-3 sm:w-4 sm:h-4 ${
                      currentEvent.event_type === 'death' ? 'text-red-400' :
                      currentEvent.event_type === 'combat' ? 'text-yellow-400' :
                      currentEvent.event_type === 'dice_roll' ? 'text-blue-400' :
                      currentEvent.event_type === 'learning' ? 'text-green-400' :
                      'text-blue-400'
                    }`} />
                  </div>
                  <span className={`text-xs sm:text-sm font-medium uppercase tracking-wider truncate ${
                    currentEvent.event_type === 'death' ? 'text-red-300' :
                    currentEvent.event_type === 'combat' ? 'text-yellow-300' :
                    currentEvent.event_type === 'dice_roll' ? 'text-blue-300' :
                    currentEvent.event_type === 'learning' ? 'text-green-300' :
                    'text-blue-300'
                  }`}>
                    {currentEvent.event_type.replace('_', ' ')}
                  </span>
                </div>
                <div className="flex items-center gap-2 flex-shrink-0">
                  {currentEvent.image_url && (
                    <ImageIcon className="w-3 h-3 text-purple-400" />
                  )}
                  <span className="text-xs text-gray-400">
                    {format(new Date(currentEvent.created_date), 'HH:mm')}
                  </span>
                </div>
              </div>

              <div className="text-white leading-relaxed whitespace-pre-wrap text-sm sm:text-base break-words overflow-hidden w-full">
                {displayedText}
                {displayedText.length < (currentEvent?.description?.length || 0) && (
                  <span className="animate-pulse">|</span>
                )}
              </div>
            </motion.div>
          )}

          <AnimatePresence>
            {(isProcessing || isGeneratingImage) && (
              <motion.div
                initial={{ opacity: 0, scale: 0.9 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.9 }}
                className="text-center py-4 sm:py-6 lg:py-8 w-full max-w-full"
              >
                <div className="flex items-center justify-center gap-2 sm:gap-3 mb-3 sm:mb-4">
                  {[0, 1, 2].map((i) => (
                    <motion.div
                      key={i}
                      className="w-2 h-2 sm:w-3 sm:h-3 bg-red-500 rounded-full"
                      animate={{
                        scale: [1, 1.2, 1],
                        opacity: [0.5, 1, 0.5],
                      }}
                      transition={{
                        duration: 1,
                        repeat: Infinity,
                        delay: i * 0.2,
                      }}
                    />
                  ))}
                </div>
                <p className="text-red-300 italic text-xs sm:text-sm lg:text-base break-words">
                  {isGeneratingImage ? 'The DM paints reality...' : 'The DM weaves consequences into reality...'}
                </p>
                <p className="text-gray-400 text-xs mt-1 sm:mt-2 break-words">
                  {isGeneratingImage ? 'Generating scene visualization' : 'Processing party actions and learning opportunities'}
                </p>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </div>
  );
}