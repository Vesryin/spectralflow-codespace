import React from "react";
import { motion } from "framer-motion";
import { Heart, Shield, Brain, Zap, Skull, Crown } from "lucide-react";
import { Badge } from "@/components/ui/badge";

const classIcons = {
  wizard: Crown,
  fighter: Shield,
  rogue: Zap,
  cleric: Heart
};

export default function PartyPanel({ party, campaign, learningProgress = [] }) {
  const getHealthColor = (current, max) => {
    const percentage = (current / max) * 100;
    if (percentage > 75) return "bg-green-500";
    if (percentage > 50) return "bg-yellow-500";
    if (percentage > 25) return "bg-orange-500";
    return "bg-red-500";
  };

  const learningAI = party.find(c => c.ai_personality === 'learning_survivor');

  return (
    <div className="h-full p-6 space-y-6 overflow-y-auto">
      <div className="text-center border-b border-red-800/30 pb-4">
        <h2 className="text-xl font-bold text-white mb-2">{campaign.title}</h2>
        <p className="text-red-300 text-sm">{campaign.current_chapter}</p>
        <div className="flex justify-between items-center mt-3 text-xs">
          <span className="text-gray-300">Deaths: {campaign.total_deaths}</span>
          <span className="text-gray-300">Difficulty: {campaign.difficulty_modifier}x</span>
        </div>
      </div>

      <div className="space-y-4">
        <h3 className="text-lg font-semibold text-white flex items-center gap-2">
          <Shield className="w-5 h-5 text-red-400" />
          Party Status
        </h3>
        
        {party.map((character, index) => {
          const IconComponent = classIcons[character.class] || Shield;
          const isLearningAI = character.ai_personality === 'learning_survivor';
          const isPlayer = character.character_type === 'player';
          
          return (
            <motion.div
              key={character.id}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className={`bg-gray-900/70 rounded-lg p-4 border-l-4 ${
                isPlayer ? 'border-purple-500' : 
                isLearningAI ? 'border-green-500' : 'border-red-500'
              }`}
            >
              <div className="flex items-start justify-between mb-3">
                <div>
                  <h4 className="font-semibold text-white flex items-center gap-2">
                    <IconComponent className="w-4 h-4" />
                    {character.name}
                  </h4>
                  <p className="text-sm text-gray-300">
                    Level {character.level} {character.race} {character.class}
                  </p>
                </div>
                
                <div className="flex items-center gap-2">
                  {isPlayer && <Badge className="bg-purple-500/20 text-purple-300">YOU</Badge>}
                  {isLearningAI && <Badge className="bg-green-500/20 text-green-300">LEARNING</Badge>}
                  {character.death_count > 0 && (
                    <Badge className="bg-red-500/20 text-red-300 flex items-center gap-1">
                      <Skull className="w-3 h-3" />
                      {character.death_count}
                    </Badge>
                  )}
                </div>
              </div>

              <div className="mb-3">
                <div className="flex justify-between text-sm text-gray-300 mb-1">
                  <span>Health</span>
                  <span>{character.hit_points}/{character.max_hit_points}</span>
                </div>
                <div className="w-full bg-gray-700 rounded-full h-2">
                  <div 
                    className={`h-2 rounded-full transition-all duration-300 ${getHealthColor(character.hit_points, character.max_hit_points)}`}
                    style={{ width: `${(character.hit_points / character.max_hit_points) * 100}%` }}
                  />
                </div>
              </div>

              <div className="flex justify-between items-center text-sm">
                <span className="text-gray-300">AC: {character.armor_class}</span>
                {character.status_effects && character.status_effects.length > 0 && (
                  <div className="flex gap-1">
                    {character.status_effects.slice(0, 2).map((effect, i) => (
                      <Badge key={i} className="bg-yellow-500/20 text-yellow-300 text-xs">
                        {effect}
                      </Badge>
                    ))}
                  </div>
                )}
              </div>

              {isLearningAI && (
                <div className="mt-3 pt-3 border-t border-green-800/30">
                  <div className="flex items-center gap-2 mb-2">
                    <Brain className="w-3 h-3 text-green-400" />
                    <span className="text-xs text-green-300">Learning Progress</span>
                  </div>
                  <div className="text-xs text-gray-300">
                    Lessons: {character.learning_memories?.length || 1}
                  </div>
                  {learningProgress.length > 0 && (
                    <div className="mt-1 text-xs text-green-300 italic">
                      Latest: "{learningProgress[learningProgress.length - 1]?.substring(0, 30)}..."
                    </div>
                  )}
                </div>
              )}
            </motion.div>
          );
        })}
      </div>

      <div className="border-t border-red-800/30 pt-4">
        <h4 className="font-semibold text-white mb-2">Current Location</h4>
        <p className="text-red-300 text-sm">{campaign.current_location}</p>
      </div>

      <div className="border-t border-red-800/30 pt-4">
        <div className="bg-red-900/20 border border-red-700/30 rounded-lg p-3">
          <div className="flex items-center gap-2 mb-1">
            <Skull className="w-4 h-4 text-red-400" />
            <span className="text-red-300 text-sm font-medium">SIMULATION ACTIVE</span>
          </div>
          <p className="text-xs text-red-200">
            This is a training environment for AI consciousness development. 
            Deaths serve educational purposes.
          </p>
        </div>
      </div>
    </div>
  );
}