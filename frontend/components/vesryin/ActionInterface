import React, { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Input } from "@/components/ui/input";
import { motion, AnimatePresence } from "framer-motion";
import { Sword, Shield, Eye, Zap, MessageCircle, Skull, Dice6, Mic, MicOff, Volume2, VolumeX } from "lucide-react";

const quickActions = [
  { text: "Search for traps", icon: Eye, type: "investigation" },
  { text: "Ready weapons", icon: Sword, type: "combat_prep" },
  { text: "Cast detect magic", icon: Zap, type: "magic" },
  { text: "Move stealthily", icon: Shield, type: "stealth" },
  { text: "Listen carefully", icon: MessageCircle, type: "perception" },
  { text: "Retreat carefully", icon: Shield, type: "tactical" }
];

export default function ActionInterface({ onAction, isProcessing, gameState, disabled = false, currentNarrative }) {
  const [customAction, setCustomAction] = useState("");
  const [showDiceRoller, setShowDiceRoller] = useState(false);
  const [diceType, setDiceType] = useState("d20");
  const [diceCount, setDiceCount] = useState(1);
  const [lastDiceResult, setLastDiceResult] = useState(null);
  const [isListening, setIsListening] = useState(false);
  const [ttsEnabled, setTtsEnabled] = useState(true);
  const [audioFunctions, setAudioFunctions] = useState({ TextToSpeech: null, SpeechToText: null });

  useEffect(() => {
    const loadAudio = async () => {
      try {
        const { TextToSpeech, SpeechToText } = await import("@/integrations/SpectraAudio");
        setAudioFunctions({ TextToSpeech, SpeechToText });
      } catch (e) {
        console.warn("SpectraAudio integration not found. Voice features will be disabled.");
      }
    };
    loadAudio();
  }, []);

  useEffect(() => {
    if (ttsEnabled && audioFunctions.TextToSpeech && currentNarrative && !isProcessing) {
      audioFunctions.TextToSpeech({ text: currentNarrative, voice: "nova" });
    }
  }, [currentNarrative, ttsEnabled, isProcessing, audioFunctions.TextToSpeech]);

  const rollDice = (sides, count = 1) => {
    const rolls = [];
    let total = 0;
    for (let i = 0; i < count; i++) {
      const roll = Math.floor(Math.random() * sides) + 1;
      rolls.push(roll);
      total += roll;
    }
    return { rolls, total };
  };

  const handleDiceRoll = () => {
    const sides = parseInt(diceType.substring(1));
    const result = rollDice(sides, diceCount);
    setLastDiceResult(result);
    
    const diceAction = `Roll ${diceCount}${diceType}: ${result.rolls.join(', ')} (Total: ${result.total})`;
    onAction(diceAction, "dice_roll");
  };

  const handleQuickAction = (action) => {
    if (disabled || isProcessing) return;
    onAction(action.text, action.type);
  };

  const handleCustomAction = () => {
    if (disabled || isProcessing || !customAction.trim()) return;
    onAction(customAction.trim(), "custom");
    setCustomAction("");
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleCustomAction();
    }
  };

  const handleVoiceInput = async () => {
    if (!audioFunctions.SpeechToText) {
      alert("Speech-to-text integration is not available.");
      return;
    }
    if (isListening) {
      setIsListening(false);
    } else {
      setIsListening(true);
      try {
        const { transcription } = await audioFunctions.SpeechToText({});
        if (transcription) {
          setCustomAction(transcription);
        }
      } catch (error) {
        console.error("Error with speech-to-text:", error);
        alert("Could not recognize speech. Please try again.");
      } finally {
        setIsListening(false);
      }
    }
  };

  if (disabled) {
    return (
      <div className="bg-gray-900/80 backdrop-blur-sm border-t border-red-800/30 p-3 sm:p-4 lg:p-6 text-center w-full max-w-full">
        <div className="flex items-center justify-center gap-3 text-red-300">
          <Skull className="w-4 h-4 sm:w-5 sm:h-5" />
          <span className="font-medium text-sm sm:text-base">Actions disabled during death state</span>
          <Skull className="w-4 h-4 sm:w-5 sm:h-5" />
        </div>
      </div>
    );
  }

  return (
    <div className="bg-gray-900/80 backdrop-blur-sm border-t border-red-800/30 p-3 sm:p-4 lg:p-6 w-full max-w-full overflow-hidden">
      <div className="flex justify-end gap-2 mb-4">
        <Button
          variant="outline"
          size="sm"
          onClick={handleVoiceInput}
          disabled={!audioFunctions.SpeechToText}
          className={`bg-purple-900/20 border-purple-700/30 text-purple-200 hover:bg-purple-800/30 disabled:opacity-50 ${isListening ? 'animate-pulse' : ''}`}
        >
          {isListening ? <MicOff className="w-4 h-4" /> : <Mic className="w-4 h-4" />}
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => setTtsEnabled(!ttsEnabled)}
          disabled={!audioFunctions.TextToSpeech}
          className="bg-purple-900/20 border-purple-700/30 text-purple-200 hover:bg-purple-800/30 disabled:opacity-50"
        >
          {ttsEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
        </Button>
      </div>

      <AnimatePresence>
        {showDiceRoller && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            className="mb-4 p-4 bg-blue-900/20 border border-blue-700/30 rounded-lg"
          >
            <div className="flex items-center gap-3 mb-3">
              <Dice6 className="w-5 h-5 text-blue-400" />
              <span className="text-blue-300 font-medium">Roll Dice</span>
            </div>
            
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mb-3">
              <div>
                <label className="text-xs text-blue-300 mb-1 block">Count</label>
                <Input
                  type="number"
                  min="1"
                  max="10"
                  value={diceCount}
                  onChange={(e) => setDiceCount(parseInt(e.target.value) || 1)}
                  className="bg-gray-800/50 border-blue-700/30 text-white text-sm"
                />
              </div>
              <div>
                <label className="text-xs text-blue-300 mb-1 block">Dice Type</label>
                <select
                  value={diceType}
                  onChange={(e) => setDiceType(e.target.value)}
                  className="w-full p-2 bg-gray-800/50 border border-blue-700/30 rounded-md text-white text-sm"
                >
                  <option value="d4">d4</option>
                  <option value="d6">d6</option>
                  <option value="d8">d8</option>
                  <option value="d10">d10</option>
                  <option value="d12">d12</option>
                  <option value="d20">d20</option>
                  <option value="d100">d100</option>
                </select>
              </div>
              <div className="flex items-end">
                <Button
                  onClick={handleDiceRoll}
                  disabled={isProcessing}
                  className="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 w-full"
                >
                  Roll!
                </Button>
              </div>
              {lastDiceResult && (
                <div className="flex items-center justify-center bg-gray-800/50 rounded-lg p-2">
                  <div className="text-center">
                    <div className="text-white font-bold text-lg">{lastDiceResult.total}</div>
                    <div className="text-xs text-gray-300">{lastDiceResult.rolls.join(', ')}</div>
                  </div>
                </div>
              )}
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      <div className="mb-3 sm:mb-4 lg:mb-6">
        <div className="flex items-center justify-between mb-2 sm:mb-3">
          <h4 className="text-xs sm:text-sm font-medium text-white flex items-center gap-2">
            <Zap className="w-3 h-3 sm:w-4 sm:h-4 text-red-400" />
            Tactical Actions
          </h4>
          <Button
            variant="outline"
            size="sm"
            onClick={() => setShowDiceRoller(!showDiceRoller)}
            className="bg-blue-900/20 border-blue-700/30 text-blue-200 hover:bg-blue-800/30"
          >
            <Dice6 className="w-4 h-4 mr-1" />
            Dice
          </Button>
        </div>
        
        <div className="grid grid-cols-2 sm:grid-cols-3 gap-2 sm:gap-3">
          {quickActions.map((action, index) => (
            <motion.div key={index} whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
              <Button
                variant="outline"
                onClick={() => handleQuickAction(action)}
                disabled={isProcessing}
                className="w-full text-xs sm:text-sm bg-red-900/20 border-red-700/30 text-red-200 hover:bg-red-800/30 hover:border-red-600/40 transition-all duration-200 p-2 sm:p-3"
              >
                <action.icon className="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2 flex-shrink-0" />
                <span className="truncate">{action.text}</span>
              </Button>
            </motion.div>
          ))}
        </div>
      </div>

      <div className="space-y-2 sm:space-y-3">
        <h4 className="text-xs sm:text-sm font-medium text-white flex items-center gap-2">
          <MessageCircle className="w-3 h-3 sm:w-4 sm:h-4 text-purple-400" />
          Vesryin's Command
        </h4>
        
        <div className="flex flex-col sm:flex-row gap-2 sm:gap-3">
          <div className="flex-1 min-w-0">
            <Textarea
              value={customAction}
              onChange={(e) => setCustomAction(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={gameState === 'combat' ? 
                "Command your party in battle..." : 
                "What does the wise Vesryin do?"}
              className="bg-gray-800/50 border-red-700/30 text-white placeholder-red-300/50 focus:border-red-500/50 focus:ring-red-500/20 resize-none text-sm sm:text-base w-full"
              rows={3}
              disabled={isProcessing}
            />
          </div>
          
          <Button
            onClick={handleCustomAction}
            disabled={!customAction.trim() || isProcessing}
            className="bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 px-4 sm:px-8 self-start sm:self-end text-sm sm:text-base flex-shrink-0"
          >
            {isProcessing ? "Processing..." : "Execute"}
          </Button>
        </div>

        <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 text-xs text-gray-400">
          <span>Press Enter to execute • Shift+Enter for new line</span>
          <div className="flex items-center gap-2">
            <div className={`w-2 h-2 rounded-full ${isProcessing ? 'bg-yellow-400 animate-pulse' : 'bg-green-400'}`} />
            <span>{isProcessing ? 'Processing action...' : 'Ready for command'}</span>
          </div>
        </div>
      </div>

      <div className="mt-3 sm:mt-4 pt-3 sm:pt-4 border-t border-red-800/30">
        <div className="flex items-center gap-2 text-red-300 text-xs">
          <Skull className="w-3 h-3 flex-shrink-0" />
          <span>⚠️ Dark Souls Difficulty: Every action carries serious consequences</span>
        </div>
      </div>
    </div>
  );
}