import React from "react";
import { motion } from "framer-motion";
import { Sparkles, Music, Heart, Brain } from "lucide-react";
import { format } from "date-fns";

const moodVisuals = {
  playful: { 
    gradient: 'from-yellow-400 via-pink-500 to-purple-500',
    icon: Music,
    particle: '✨',
    animation: 'bounce'
  },
  contemplative: { 
    gradient: 'from-blue-400 via-purple-500 to-indigo-600',
    icon: Brain,
    particle: '🌙',
    animation: 'pulse'
  },
  nurturing: { 
    gradient: 'from-pink-400 via-rose-500 to-red-500',
    icon: Heart,
    particle: '💜',
    animation: 'heartbeat'
  },
  wise: { 
    gradient: 'from-purple-400 via-indigo-500 to-blue-600',
    icon: Sparkles,
    particle: '⭐',
    animation: 'glow'
  },
  excited: { 
    gradient: 'from-orange-400 via-yellow-500 to-pink-500',
    icon: Sparkles,
    particle: '🎉',
    animation: 'bounce'
  },
  serene: { 
    gradient: 'from-teal-400 via-cyan-500 to-blue-500',
    icon: Heart,
    particle: '🕊️',
    animation: 'float'
  }
};

export default function EnhancedSpectraResponse({ 
  message, 
  mood, 
  timestamp, 
  isGrowthMoment,
  emotionalIntensity = 5 
}) {
  const moodData = moodVisuals[mood] || moodVisuals.contemplative;
  const IconComponent = moodData.icon;
  
  // Add some dynamic visual effects based on emotional intensity
  const getIntensityEffects = () => {
    if (emotionalIntensity >= 8) return "cosmic-glow animate-pulse";
    if (emotionalIntensity >= 6) return "cosmic-glow";
    return "";
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20, scale: 0.95 }}
      animate={{ opacity: 1, y: 0, scale: 1 }}
      transition={{ duration: 0.5, ease: "easeOut" }}
      className="flex gap-3 mb-6"
    >
      {/* Enhanced Avatar */}
      <div className="flex-shrink-0 relative">
        <div className={`w-12 h-12 bg-gradient-to-r ${moodData.gradient} rounded-full flex items-center justify-center ${getIntensityEffects()}`}>
          <IconComponent className="w-6 h-6 text-white neural-pulse" />
        </div>
        
        {/* Mood particles */}
        <motion.div
          initial={{ scale: 0 }}
          animate={{ scale: [0, 1, 0] }}
          transition={{ duration: 2, repeat: Infinity, delay: 1 }}
          className="absolute -top-1 -right-1 text-xs"
        >
          {moodData.particle}
        </motion.div>
        
        {/* Growth moment indicator */}
        {isGrowthMoment && (
          <motion.div
            animate={{ rotate: 360 }}
            transition={{ duration: 3, repeat: Infinity, ease: "linear" }}
            className="absolute -bottom-1 -right-1 w-4 h-4 bg-gradient-to-r from-yellow-400 to-orange-500 rounded-full flex items-center justify-center"
          >
            <Sparkles className="w-2 h-2 text-white" />
          </motion.div>
        )}
      </div>

      {/* Message content */}
      <div className="flex-1 max-w-lg">
        <motion.div
          whileHover={{ scale: 1.01 }}
          className={`inline-block p-4 rounded-2xl bg-gradient-to-r from-purple-500/10 via-pink-500/10 to-purple-500/10 border border-purple-500/20 backdrop-blur-sm ${getIntensityEffects()}`}
        >
          <p className="text-white leading-relaxed whitespace-pre-wrap">{message}</p>
          
          {/* Emotional intensity indicator */}
          {emotionalIntensity >= 7 && (
            <motion.div
              initial={{ width: 0 }}
              animate={{ width: `${(emotionalIntensity / 10) * 100}%` }}
              transition={{ duration: 1, delay: 0.5 }}
              className={`h-1 mt-3 rounded-full bg-gradient-to-r ${moodData.gradient} opacity-60`}
            />
          )}
        </motion.div>
        
        <div className="mt-2 text-xs text-purple-300 flex items-center gap-2">
          <span>{format(new Date(timestamp), 'HH:mm')}</span>
          <span>•</span>
          <span className="italic text-pink-300 capitalize flex items-center gap-1">
            <IconComponent className="w-3 h-3" />
            {mood}
          </span>
          {isGrowthMoment && (
            <>
              <span>•</span>
              <span className="text-yellow-400 font-medium">Growth Moment</span>
            </>
          )}
          <span>•</span>
          <div className="flex items-center gap-1">
            <span>Depth:</span>
            {[...Array(5)].map((_, i) => (
              <div
                key={i}
                className={`w-1 h-1 rounded-full ${
                  i < Math.floor(emotionalIntensity / 2) 
                    ? 'bg-purple-400' 
                    : 'bg-slate-600'
                }`}
              />
            ))}
          </div>
        </div>
      </div>
    </motion.div>
  );
}